const probTable = [
    [5, 5, 5, 5, 5, 5, 10, 20, 20, 20],
    [5, 5, 5, 5, 5, 10, 10, 20, 20, 15],
    [5, 5, 5, 5, 5, 10, 20, 15, 15, 15],
    [5, 5, 5, 5, 5, 20, 10, 15, 15, 15],
    [5, 5, 5, 10, 10, 10, 10, 15, 15, 15],
    [5, 5, 5, 10, 10, 10, 15, 15, 15, 10],
    [5, 5, 5, 10, 10, 15, 15, 15, 10, 10],
    [5, 5, 5, 10, 15, 15, 15, 10, 10, 10],
    [5, 5, 10, 10, 15, 10, 15, 10, 10, 10],
    [5, 5, 10, 15, 10, 15, 10, 10, 10, 10],
    [5, 5, 10, 10, 15, 20, 10, 10, 10, 5],
    [5, 5, 10, 10, 20, 15, 15, 10, 5, 5],
    [5, 5, 10, 15, 15, 20, 10, 10, 5, 5],
    [5, 5, 10, 20, 20, 10, 10, 10, 5, 5],
    [5, 10, 10, 20, 15, 10, 10, 10, 5, 5],
    [10, 10, 10, 15, 15, 10, 10, 10, 5, 5],
    [10, 10, 15, 15, 10, 10, 10, 10, 5, 5],
    [10, 15, 15, 10, 10, 10, 10, 10, 5, 5],
    [15, 20, 5, 10, 10, 10, 10, 10, 5, 5],
    [15, 10, 15, 15, 10, 10, 10, 5, 5, 5],
    [15, 15, 15, 10, 10, 10, 10, 5, 5, 5],
    [20, 15, 10, 10, 10, 10, 10, 5, 5, 5],
    [15, 20, 15, 10, 10, 10, 5, 5, 5, 5],
    [20, 20, 10, 10, 10, 10, 5, 5, 5, 5],
    [20, 20, 15, 10, 10, 5, 5, 5, 5, 5],
    [20, 15, 15, 15, 10, 10, 5, 5, 5, 0],
    [20, 20, 15, 10, 10, 10, 5, 5, 5, 0],
    [20, 25, 10, 10, 10, 10, 5, 5, 5, 0],
    [25, 20, 10, 10, 10, 10, 5, 5, 5, 0],
    [25, 20, 15, 10, 10, 5, 5, 5, 5, 0],
    [25, 20, 10, 15, 10, 10, 5, 5, 0, 0],
    [25, 20, 15, 15, 10, 5, 5, 5, 0, 0],
    [25, 25, 15, 10, 10, 5, 5, 5, 0, 0],
    [25, 30, 10, 10, 10, 5, 5, 5, 0, 0],
    [30, 20, 20, 10, 5, 5, 5, 5, 0, 0],
    [25, 20, 25, 10, 10, 5, 5, 0, 0, 0],
    [30, 20, 20, 10, 10, 5, 5, 0, 0, 0],
    [30, 25, 15, 10, 10, 5, 5, 0, 0, 0],
    [30, 25, 20, 10, 5, 5, 5, 0, 0, 0],
    [35, 25, 20, 5, 5, 5, 5, 0, 0, 0],
    [35, 30, 15, 10, 5, 5, 0, 0, 0, 0],
    [35, 35, 15, 5, 5, 5, 0, 0, 0, 0],
    [40, 35, 10, 5, 5, 5, 0, 0, 0, 0],
    [50, 25, 10, 5, 5, 5, 0, 0, 0, 0],
    [55, 25, 5, 5, 5, 5, 0, 0, 0, 0],
    [50, 30, 10, 5, 5, 0, 0, 0, 0, 0],
    [50, 35, 5, 5, 5, 0, 0, 0, 0, 0],
    [60, 25, 5, 5, 5, 0, 0, 0, 0, 0],
    [60, 25, 10, 5, 0, 0, 0, 0, 0, 0],
    [55, 35, 10, 0, 0, 0, 0, 0, 0, 0],
    [60, 35, 5, 0, 0, 0, 0, 0, 0, 0],
    [65, 30, 5, 0, 0, 0, 0, 0, 0, 0],
    [65, 35, 0, 0, 0, 0, 0, 0, 0, 0],
    [75, 25, 0, 0, 0, 0, 0, 0, 0, 0],
    [80, 20, 0, 0, 0, 0, 0, 0, 0, 0],
    [85, 15, 0, 0, 0, 0, 0, 0, 0, 0],
    [90, 10, 0, 0, 0, 0, 0, 0, 0, 0],
    [95, 5, 0, 0, 0, 0, 0, 0, 0, 0],
    [100, 0, 0, 0, 0, 0, 0, 0, 0, 0]
];

function Pool(startlev, endlev) {
    if (startlev < 141 || startlev > 199) {
        return -1;
    }

    let lev = startlev, rslt = "", cnt = 0;

    for (; lev < endlev; cnt++) {
        let seed = Math.random() * 100;
        let probability = 0, i = 0;
        for (i = 0; i < 10; i++) {
            probability += probTable[lev - 141][i];
            if (seed <= probability) {
                break;
            }
        }
        rslt += `${lev}레벨 → ${lev + 1 + i}레벨 (${i + 1}레벨 상승)\n`;
        lev += i + 1;
    }
    return `${rslt}총 ${cnt}회의 풀장을 진행`;
}

module.exports = {
    usage: `${client.prefix}풀장 (시작 레벨) (목표 레벨)`,
    command: ["풀장", "ㅍㅈ"],
    description: `- 시작 레벨 ~ 목표 레벨의 풀장 시뮬레이션을 수행합니다.
- 참고. ${client.prefix}풀장 확률 (시작 레벨)`,
    type: ["메이플"],
    async execute(message, args) {
        if (args.length != 2) {
            return message.channel.send(`**${this.usage}**\n- 대체 명령어: ${this.command.join(', ')}\n${this.description}`);
        }

        if (args[0] == '확률' || args[0] == 'ㅎㄹ') {
            let startlev = +args[1], rslt = `<${startlev}레벨 기준 확률>\n`;
            if (isNaN(startlev) || startlev < 141 || startlev > 199) {
                return message.channel.send('141 ~ 199 범위의 시작 레벨을 입력해주세요.');
            }
            for (i = 0; i < 10; i++) {
                rslt += `${i + 1} 레벨업 확률: ${probTable[startlev - 141][i]}%\n`;
            }
            return message.channel.send(rslt.trimEnd());
        }

        const startlev = +args[0], endlev = +args[1];
        if (isNaN(startlev) || startlev < 141 || startlev > 199) {
            return message.channel.send('141 ~ 199 범위의 시작 레벨을 입력해주세요.');
        }
        if (isNaN(endlev) || endlev < startlev || endlev > 200) {
            return message.channel.send('시작레벨 ~ 200 범위의 목표 레벨을 입력해주세요.');
        }
        return message.channel.send(Pool(startlev, endlev));
    }
};